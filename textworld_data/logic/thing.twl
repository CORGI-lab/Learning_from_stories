# thing
type t {
    predicates {
        sharp(t);
        cuttable(t);
        cookable(t);
        drinkable(t);
        stampable(t);
        stamped(t);
        stampless(t);
    }

    rules {
        examine/t :: at(P, r) & $at(t, r) -> at(P, r);
        stamp/t :: at(P, r) & $at(pr,r) & in(f, I) & stampless(pr) -> stamped(pr);
    }

    inform7 {
        type {
            kind :: "thing";
            definition :: "a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be stamped. a thing is usually not stamped. a thing can be stampless. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.";
        }

        predicates {
            sharp(t) :: "The {t} is sharp";
            cookable(t) :: "The {t} is cookable";
            cuttable(t) :: "The {t} is cuttable";
            drinkable(t) :: "The {t} is drinkable";
            stampable(t) :: "The {t} is stampable";
            stamped(t) :: "The {t} is stamped";
            stampless(t) :: "The {t} is stampless";
        }

        commands {
            examine/t :: "examine {t}" :: "examining the {t}";
            stamp/t :: "stamp {t}" :: "_stamping the {t}";
        }
        
        code :: """
            Understand the command "stamp" as something new. 
            Understand "stamp [something]" as _stamping. 
            _stamping is an action applying to a thing. 
        
            Carry out _stamping: 
                if a thing (called tx) is stampless: 
                    Say "You stamp it.";
                    Now the tx is stamped; 
            After _stamping: 
                Say "It is marked with your stamp.";
        """;
    }
}

type object {
    inform7 {
        type {
            kind :: "object";
        }
    }
}
