# person
type pr : t{
    predicates {
        attacked(pr);
        asked(pr);
	not_asked(pr);
    }


    rules {
        attack/pr   :: $at(P, r) & $at(pr, r) -> attacked(pr);
        ask/pr :: $at(P, r) & $at(pr,r) & $in(f, I) & not_asked(pr) -> asked(pr);
    }

    constraints {
    # Predicate conflicts
    	pr1 :: asked(pr) & not_asked(pr) -> fail();
    }

    inform7 {

        
        type {
            kind :: "person";
            definition :: "Person can be attacked. Person can be asked. Person is fixed in place.";
        }

        predicates {
            attacked(pr) :: "The {pr} is attacked";
            asked(pr) :: "The {pr} is asked";
            not_asked(pr) :: "The {pr} is not asked";
        }

        commands {
            attack/pr :: "attack {pr}" :: "_attacking {pr}";
            ask/pr :: "ask {pr} about the bank robbery" :: "_asking the {pr}";
        }
	code :: """
            Understand the command "attack" as something new.
            Understand "attack [something]" as _attacking.
            _attacking is an action applying to a thing.

            After _attacking a person:
		say "[the noun] is being attacked.";
            
            Understand the command "ask" as something new.
            Understand "ask [something]" as _asking.
            _asking is an action applying to a thing.

            After _asking a person:
		say "[the noun] has given the information. he said go north.";
           """;
	
    }
}
