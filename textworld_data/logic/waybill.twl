#thing-like
type fo : o {
    predicates {
        stampable(fo);
        stamped(fo);
        stampless(fo);
        not_stamped(fo);
    }

    rules {
        stamp :: in(fo, I) & stampable(fo) -> stamped(fo);
    }

    constraints {
        fo1 :: stamped(fo) & not_stamped(fo) -> fail();
    }

    inform7 {
        type {
            kind :: "waybill";
            definition :: "a waybill is something. a waybill can be stamped. a waybill has a type of stamping. a waybill is portable. a waybill can be seen. a waybill can be examined. a waybill can be on something. a waybill is usually not stamped. a waybill can be stampable. a waybill can be stampless.";
        }

        predicates {
            stampable(fo) :: "The {fo} is stampable";
            stamped(fo) :: "The {fo} is stamped";
            stampless(fo) :: "The {fo} is stampless";
            not_stamped(fo) :: "The {fo} is not stamped";
        }

        commands {
            stamp/fo :: "stamp {fo}" :: "_stamping the {fo}";
        }

        code :: """
            Understand the command "stamp" as something new. 
            Understand "stamp [something]" as stamping. 
            stamping is an action applying to a thing. 

            Before stamping when the noun is not stampable:
                say "Can only stamp form-like objects.";
                rule fails.
                
            Carry out stamping: 
                if a waybill (called tx) is stampable: 
                    say "You stamp it.";
                    Now the tx is stamped; 
            After stamping: 
                Say "It is now stamped.";
        """;
    }
}
