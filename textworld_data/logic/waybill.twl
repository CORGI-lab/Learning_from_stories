# text-like
type fo : o {
    predicates {
        stampable(fo);
        stamped(fo);
        not_stamped(fo);
        stampless(fo);
    }

    constraints {
        fo1 :: stamped(fo) & not_stamped(fo) -> fail();
    }

    inform7 {
        type {
            kind :: "waybill-like";
            definition :: "a waybill-like can be stamped. a waybill-like can be not stamped. a waybill-like can be stampless.";
        }

        predicates {
            stampable(fo) :: "The {fo} is stampable";
            stamped(fo) :: "The {fo} is stamped";
            not_stamped(fo) :: "The {fo} is not stamped";
            stampless(fo) :: "The {fo} is stampless";
        }

        commands {
            examine/fo :: "examine {fo}" :: "examining the {fo}";
            stamp/fo :: "stamp {fo}" :: "stamping the {fo}";
        }

        code :: """
            Understand the command "stamp" as something new. 
            Understand "stamp [something]" as stamping. 
            stamping is an action applying to a thing. 

            Carry out stamping: 
                if a waybill-like (called tx) is not stamped: 
                    say "You stamp it.";
                    Now the tx is stamped; 
            After stamping: 
                Say "It is marked with your stamp.";
        """;
    }
}
