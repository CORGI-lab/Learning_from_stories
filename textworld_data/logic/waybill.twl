#thing-like
type fo : o {
    predicates {
        stampable(fo);
        stamped(fo);
        stampless(fo);
        not_stamped(fo);
    }

    rules {
        stamp :: in(fo, I) & stampable(fo) -> stamped(fo);
    }

    constraints {
        fo1 :: stamped(fo) & not_stamped(fo) -> fail();
    }

    inform7 {
        type {
            kind :: "waybill";
            definition :: "waybills can be stamped. waybills can be stampable. waybills are portable. waybills can be seen. waybills can be examined. waybills can be on something. waybills are usually not stamped. waybills can be stampless.";
        }

        predicates {
            stampable(fo) :: "The {fo} is stampable";
            stamped(fo) :: "The {fo} is stamped";
            stampless(fo) :: "The {fo} is stampless";
            not_stamped(fo) :: "The {fo} is not stamped";
        }

        commands {
            stamp/fo :: "stamp {fo}" :: "_stamping the {fo}";
        }

        code :: """
            Understand the command "stamp" as something new. 
            Understand "stamp [something]" as stamping. 
            stamping is an action applying to a thing. 

            Before stamping when the noun is not stampable:
                say "Can only stamp form-like objects.";
                rule fails.

            Carry out stamping: 
                if a waybill (called tx) is stampable: 
                    say "You stamp it.";
                    Now the tx is stamped; 
            After stamping: 
                Say "It is now stamped.";
        """;
    }
}
